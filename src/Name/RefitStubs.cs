﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace Name
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedINameApi : INameApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedINameApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<CheckDomainAvailabilityResponse> CheckDomainAvailability(CheckDomainAvailabilityRequest checkDomainAvailabilityRequest,string sessionToken)
        {
            var arguments = new object[] { checkDomainAvailabilityRequest,sessionToken };
            return (Task<CheckDomainAvailabilityResponse>) methodImpls["CheckDomainAvailability"](Client, arguments);
        }

        public virtual Task<CreateDomainResponse> CreateDomain(CreateDomainRequest createDomainRequest,string sessionToken)
        {
            var arguments = new object[] { createDomainRequest,sessionToken };
            return (Task<CreateDomainResponse>) methodImpls["CreateDomain"](Client, arguments);
        }

        public virtual Task<HelloResponse> Hello()
        {
            var arguments = new object[] {  };
            return (Task<HelloResponse>) methodImpls["Hello"](Client, arguments);
        }

        public virtual Task<ListDomainsResponse> ListDomains(string sessionToken)
        {
            var arguments = new object[] { sessionToken };
            return (Task<ListDomainsResponse>) methodImpls["ListDomains"](Client, arguments);
        }

        public virtual Task<LockDomainResponse> LockDomain(string domainName,string sessionToken)
        {
            var arguments = new object[] { domainName,sessionToken };
            return (Task<LockDomainResponse>) methodImpls["LockDomain"](Client, arguments);
        }

        public virtual Task<LoginResponse> Login(LoginRequest loginRequest)
        {
            var arguments = new object[] { loginRequest };
            return (Task<LoginResponse>) methodImpls["Login"](Client, arguments);
        }

        public virtual Task<LoginResponse> Logout(string sessionToken)
        {
            var arguments = new object[] { sessionToken };
            return (Task<LoginResponse>) methodImpls["Logout"](Client, arguments);
        }

        public virtual Task<RetrieveAccountResponse> RetrieveAccount(string sessionToken)
        {
            var arguments = new object[] { sessionToken };
            return (Task<RetrieveAccountResponse>) methodImpls["RetrieveAccount"](Client, arguments);
        }

        public virtual Task<UnlockDomainResponse> UnlockDomain(string domainName,string sessionToken)
        {
            var arguments = new object[] { domainName,sessionToken };
            return (Task<UnlockDomainResponse>) methodImpls["UnlockDomain"](Client, arguments);
        }

    }
}


